html
  head
    title!= title
    link(rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css")
    //- link(rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.6.0/codemirror.min.css")
    script(src="https://code.jquery.com/jquery-1.11.3.min.js")
    //- script(src="https://cdnjs.cloudflare.com/ajax/libs/codemirror/5.6.0/codemirror.min.js")
    script(src="https://cdnjs.cloudflare.com/ajax/libs/es5-shim/4.0.3/es5-shim.js")
    script(type='text/javascript' src="/assets/main.js")
    != css('application.css')
    != css("codemirror/lib/codemirror.css")
    != css("codemirror/theme/solarized.css")
    != css("xterm.js/src/xterm.css")
    != css("escaper.js/src/escaper.css")
    != js("codemirror/mode/javascript/javascript");
    != js("codemirror/mode/python/python");
    != js("codemirror/mode/ruby/ruby");
    != js("codemirror/mode/clike/clike");
    != js("codemirror/mode/sql/sql");
    != js("codemirror/mode/cmake/cmake");
    != js("codemirror/mode/jade/jade");
    != js("codemirror/mode/yaml/yaml");
    != js("codemirror/mode/clojure/clojure");
    != js("codemirror/mode/scheme/scheme");
    != js("codemirror/mode/erlang/erlang");
    != js("codemirror/mode/xml/xml");
    != js("codemirror/mode/htmlmixed/htmlmixed");
    != js("codemirror/mode/css/css");
    != js("codemirror/mode/rust/rust");
    != js("codemirror/mode/go/go");
    != js("codemirror/mode/haskell/haskell");
    != js("codemirror/mode/perl/perl");
    != js("codemirror/mode/php/php");

    != js("codemirror/addon/hint/show-hint");
    != js("codemirror/addon/hint/javascript-hint");
    != js("codemirror/addon/hint/css-hint");
    != js("codemirror/addon/hint/anyword-hint");

    != js("xterm.js/addons/fit/fit.js");
  body
    #hexlet-ide.hexlet-ide

    script.
        var path = window.location.pathname;
        if (path[path.length - 1] == "/") {
            path = path.slice(0, path.length - 1);
        }
        var widget = HexletIde.create(document.getElementById("hexlet-ide"), {
          rpc: {
              url: window.location.host,
              events: {
                reconnect: console.log.bind(console, "reconnect"),
                reconnect_error: console.log.bind(console, "reconnect_error"),
                reconnect_failed: console.log.bind(console, "reconnect_failed"),
              },
              options: {
                path: path + "/socket.io"
              }
          },
          cmd: "make test"
        });

        window.addEventListener("message", widget.handleWindowMessage.bind(widget));
